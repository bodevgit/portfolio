<!-- User Planning Page -->
<div class="container">
    <div class="row mb-5">
        <div class="col-12 text-center">
            <h1 class="mb-4">Your Personal Planning</h1>
            <p class="lead">Manage your schedule and upcoming tasks.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-4 mb-4">
            <div class="card bg-space float">
                <div class="card-body">
                    <h5 class="card-title cosmic-glow">Today's Tasks</h5>
                    <ul class="list-group list-group-flush bg-transparent task-list" id="today-tasks">
                    </ul>
                    <div class="mt-3">
                        <div class="input-group">
                            <input type="text" class="form-control bg-dark text-light" placeholder="Add a new task..." id="new-today-task">
                            <button class="btn btn-primary add-task" data-target="today-tasks"><i class="fas fa-plus"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4 mb-4">
            <div class="card bg-space float">
                <div class="card-body">
                    <h5 class="card-title cosmic-glow">Upcoming</h5>
                    <ul class="list-group list-group-flush bg-transparent task-list" id="upcoming-tasks">
                    </ul>
                    <div class="mt-3">
                        <div class="input-group">
                            <input type="text" class="form-control bg-dark text-light" placeholder="Add a new task..." id="new-upcoming-task">
                            <button class="btn btn-primary add-task" data-target="upcoming-tasks"><i class="fas fa-plus"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4 mb-4">
            <div class="card bg-space float">
                <div class="card-body">
                    <h5 class="card-title cosmic-glow">Project Ideas</h5>
                    <ul class="list-group list-group-flush bg-transparent task-list" id="project-ideas">
                    </ul>
                    <div class="mt-3">
                        <div class="input-group">
                            <input type="text" class="form-control bg-dark text-light" placeholder="Add a new idea..." id="new-project-idea">
                            <button class="btn btn-primary add-task" data-target="project-ideas"><i class="fas fa-plus"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Calendar Section -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card bg-space float">
                <div class="card-body">
                    <h5 class="card-title cosmic-glow">Monthly Calendar</h5>
                    <div class="calendar-container" id="calendar">
                        <!-- Calendar will be generated by JavaScript -->
                        <div class="text-center py-5">
                            <p>Calendar will be displayed here...</p>
                            <span class="badge bg-primary">Coming Soon</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Some decorative space elements -->
    <div class="space-object planet" style="top: 20%; right: 5%;"></div>
    <div class="space-object star pulse" style="top: 70%; left: 8%;"></div>
    <div class="space-object comet" style="top: 40%; right: 15%;"></div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize task lists from server data
        const taskLists = {
            'today-tasks': <%- (typeof tasks !== 'undefined' && tasks['today-tasks']) ? JSON.stringify(tasks['today-tasks']) : '[]' %>,
            'upcoming-tasks': <%- (typeof tasks !== 'undefined' && tasks['upcoming-tasks']) ? JSON.stringify(tasks['upcoming-tasks']) : '[]' %>,
            'project-ideas': <%- (typeof tasks !== 'undefined' && tasks['project-ideas']) ? JSON.stringify(tasks['project-ideas']) : '[]' %>
        };
        
        // Create mapping from list ID to category name for API calls
        const listToCategory = {
            'today-tasks': 'today',
            'upcoming-tasks': 'upcoming',
            'project-ideas': 'project'
        };
        
        // Render the initial tasks from server data
        for (const [listId, tasks] of Object.entries(taskLists)) {
            const taskList = document.getElementById(listId);
            
            // Clear any existing static example items
            taskList.innerHTML = '';
            
            // Add each task from database
            tasks.forEach(task => {
                addTaskToDOM(taskList, task.id, task.text, task.completed);
            });
        }
        
        // Function to add task to DOM
        function addTaskToDOM(taskList, taskId, taskText, completed = false) {
            const newTaskItem = document.createElement('li');
            newTaskItem.className = 'list-group-item bg-space border-starlight d-flex justify-content-between align-items-center';
            newTaskItem.dataset.taskId = taskId;
            
            newTaskItem.innerHTML = `
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="task-${taskId}" ${completed ? 'checked' : ''}>
                    <label class="form-check-label" for="task-${taskId}" 
                           style="${completed ? 'text-decoration: line-through; opacity: 0.6;' : ''}">${taskText}</label>
                </div>
                <div class="task-actions">
                    <button class="btn btn-sm btn-outline-danger delete-task"><i class="fas fa-trash-alt"></i></button>
                </div>
            `;
            
            // Add with animation
            newTaskItem.style.opacity = '0';
            taskList.appendChild(newTaskItem);
            
            // Trigger reflow for animation
            void newTaskItem.offsetWidth;
            
            // Fade in
            newTaskItem.style.transition = 'opacity 0.3s ease-in';
            newTaskItem.style.opacity = '1';
            
            // Add delete functionality
            addDeleteTaskHandlers(newTaskItem.querySelector('.delete-task'));
        }
        
        // Add task functionality
        document.querySelectorAll('.add-task').forEach(button => {
            button.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const category = listToCategory[targetId];
                const inputField = this.parentElement.querySelector('input');
                const taskText = inputField.value.trim();
                
                if (taskText) {
                    // Send task to server
                    fetch('/api/tasks', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            category: category,
                            text: taskText
                        }),
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(task => {
                        const taskList = document.getElementById(targetId);
                        addTaskToDOM(taskList, task.id, task.text, task.completed);
                        
                        // Clear input
                        inputField.value = '';
                    })
                    .catch(error => {
                        console.error('Error adding task:', error);
                        alert('Failed to add task. Please try again.');
                    });
                }
            });
        });
        
        // Delete task functionality
        function addDeleteTaskHandlers(element) {
            element.addEventListener('click', function() {
                const taskItem = this.closest('li');
                const taskId = taskItem.dataset.taskId;
                
                // Delete from server
                fetch(`/api/tasks/${taskId}`, {
                    method: 'DELETE',
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Fade out and remove from DOM
                    taskItem.style.transition = 'opacity 0.3s ease-out';
                    taskItem.style.opacity = '0';
                    
                    // Remove after animation
                    setTimeout(() => {
                        taskItem.remove();
                    }, 300);
                })
                .catch(error => {
                    console.error('Error deleting task:', error);
                    alert('Failed to delete task. Please try again.');
                });
            });
        }
        
        // Add handlers to existing delete buttons
        document.querySelectorAll('.delete-task').forEach(addDeleteTaskHandlers);
        
        // Handle checkbox state changes
        document.addEventListener('change', function(e) {
            if (e.target && e.target.type === 'checkbox') {
                const taskItem = e.target.closest('li');
                if (!taskItem) return;
                
                const taskId = taskItem.dataset.taskId;
                const completed = e.target.checked;
                const label = e.target.nextElementSibling;
                
                // Update on server
                fetch(`/api/tasks/${taskId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        completed: completed
                    }),
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Update visual state
                    if (completed) {
                        label.style.textDecoration = 'line-through';
                        label.style.opacity = '0.6';
                    } else {
                        label.style.textDecoration = 'none';
                        label.style.opacity = '1';
                    }
                })
                .catch(error => {
                    console.error('Error updating task:', error);
                    alert('Failed to update task. Please try again.');
                    // Revert checkbox state
                    e.target.checked = !completed;
                    if (!completed) {
                        label.style.textDecoration = 'line-through';
                        label.style.opacity = '0.6';
                    } else {
                        label.style.textDecoration = 'none';
                        label.style.opacity = '1';
                    }
                });
            }
        });
    });
</script>
